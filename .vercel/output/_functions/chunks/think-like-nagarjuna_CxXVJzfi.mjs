import { d as createVNode, F as Fragment, _ as __astro_tag_component__ } from './astro/server_BcgDXOCH.mjs';
import './index_DfOMS8cV.mjs';
import { $ as $$Image } from './_astro_assets_B8vHAfVx.mjs';
import 'clsx';

const nagarjunaImage = new Proxy({"src":"/_astro/nagarjuna.Ddj-QNuI.webp","width":1792,"height":1024,"format":"jpg","orientation":1}, {
						get(target, name, receiver) {
							if (name === 'clone') {
								return structuredClone(target);
							}
							if (name === 'fsPath') {
								return "/Users/kiily/Documents/01 - CODE/thevoid/src/assets/garden/nagarjuna.webp";
							}
							
							return target[name];
						}
					});

const frontmatter = {
  "title": "Think like Nāgārjuna",
  "description": "A philosophical inquiry into the nature of thought and thinker, exploring the interdependent relationship between thinking and the one who thinks.",
  "publishDate": "2024-12-28T00:00:00.000Z",
  "category": "Philosophy",
  "tags": ["nagarjuna", "philosophy", "thought", "buddhism", "dependent arising", "meditation", "consciousness"],
  "connections": [{
    "title": "Original Substack Post",
    "url": "https://kiily.substack.com/p/think-like-nagarjuna"
  }]
};
function getHeadings() {
  return [];
}
function _createMdxContent(props) {
  const _components = {
    em: "em",
    p: "p",
    ...props.components
  };
  return createVNode(Fragment, {
    children: [createVNode(_components.p, {
      children: createVNode(_components.em, {
        children: "23/11/2022 - Playing with words"
      })
    }), "\n", createVNode(_components.p, {
      children: "There are considerations one must take into account and hopefully convey them as best as possible within the confines of the language."
    }), "\n", createVNode(_components.p, {
      children: "Is there a thought without a thinker?"
    }), "\n", createVNode(_components.p, {
      children: "If thought is, then what thought it?"
    }), "\n", createVNode(_components.p, {
      children: "If there must be a thinker"
    }), "\n", createVNode(_components.p, {
      children: "How does the thinker know it thinks?"
    }), "\n", createVNode(_components.p, {
      children: "Is it because thought thinks itself a thinker?"
    }), "\n", createVNode(_components.p, {
      children: "Thought needs the thinker"
    }), "\n", createVNode(_components.p, {
      children: "The thinker needs the thought"
    }), "\n", createVNode(_components.p, {
      children: "Do they exist independently?"
    }), "\n", createVNode(_components.p, {
      children: "Who came first, the chicken or the egg?"
    }), "\n", createVNode(_components.p, {
      children: "I suppose they both did, never, and at exactly the same time."
    }), "\n", createVNode("div", {
      class: "flex flex-col items-center justify-center",
      children: [createVNode($$Image, {
        src: nagarjunaImage,
        alt: "In deep thought in an ethereal world",
        width: 600,
        height: 400,
        class: "w-full max-w-2xl h-auto"
      }), createVNode("figcaption", {
        class: "mt-2 text-center text-sm text-garden-secondary dark:text-garden-dark-secondary font-body",
        children: "”In deep thought in an ethereal world” - generated by DALL-E"
      })]
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}

const url = "src/content/garden/think-like-nagarjuna.mdx";
const file = "/Users/kiily/Documents/01 - CODE/thevoid/src/content/garden/think-like-nagarjuna.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "/Users/kiily/Documents/01 - CODE/thevoid/src/content/garden/think-like-nagarjuna.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, Content as default, file, frontmatter, getHeadings, url };
