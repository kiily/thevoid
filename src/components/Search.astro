---
import { getCollection } from 'astro:content';

const posts = await getCollection('garden');
---

<div class="mb-6">
	<div class="relative">
		<input
			type="search"
			id="search"
			placeholder="Search garden..."
			class="w-full px-3 py-1.5 pr-8 text-sm text-garden-primary dark:text-garden-dark-primary bg-white dark:bg-garden-dark-surface border border-gray-200 dark:border-gray-700 rounded-md focus:outline-none focus:ring-1 focus:ring-garden-accent dark:focus:ring-garden-dark-accent focus:border-transparent placeholder-garden-secondary dark:placeholder-garden-dark-secondary"
		/>
		<div
			class="absolute right-2 top-1/2 -translate-y-1/2 text-garden-secondary dark:text-garden-dark-secondary pointer-events-none"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				class="h-4 w-4"
				fill="none"
				viewBox="0 0 24 24"
				stroke="currentColor"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
			</svg>
		</div>
	</div>
	<div
		id="search-results"
		class="absolute w-full mt-1 bg-white dark:bg-garden-dark-surface border border-gray-200 dark:border-gray-700 rounded-md shadow-lg hidden max-h-48 overflow-y-auto z-50"
	>
	</div>
</div>

<script>
	let debounceTimeout: number;

	const searchInput = document.getElementById('search');
	const searchResults = document.getElementById('search-results');

	if (searchInput && searchResults) {
		searchInput.addEventListener('input', (e) => {
			const target = e.currentTarget as HTMLInputElement;
			if (!(target instanceof HTMLInputElement)) return;

			const searchTerm = target.value.trim();

			// Clear previous timeout
			if (debounceTimeout) {
				clearTimeout(debounceTimeout);
			}

			if (searchTerm.length === 0) {
				searchResults.classList.add('hidden');
				return;
			}

			// Debounce the search
			debounceTimeout = window.setTimeout(async () => {
				try {
					const response = await fetch(
						`/api/search?q=${encodeURIComponent(searchTerm)}`
					);
					const data = await response.json();

					if (data.results.length === 0) {
						searchResults.innerHTML = `
							<div class="p-2 text-sm text-garden-secondary dark:text-garden-dark-secondary">
								No results found
							</div>
						`;
						searchResults.classList.remove('hidden');
						return;
					}

					searchResults.classList.remove('hidden');
					searchResults.innerHTML = data.results
						.map((result: { item: any }) => {
							const item = result.item;
							const typeIcon =
								item.type === 'post'
									? '<svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" /></svg>'
									: item.type === 'category'
										? '<svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" /></svg>'
										: '<svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5a1.994 1.994 0 011.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" /></svg>';

							return `
								<a href="${item.url}" class="block p-2 hover:bg-garden-background dark:hover:bg-garden-dark-background">
									<div class="flex items-center gap-2">
										<div class="text-garden-secondary dark:text-garden-dark-secondary">
											${typeIcon}
										</div>
										<div>
											<div class="text-sm font-medium text-garden-primary dark:text-garden-dark-primary">${item.title}</div>
											<div class="text-xs text-garden-secondary dark:text-garden-dark-secondary truncate">${item.description}</div>
										</div>
									</div>
								</a>
							`;
						})
						.join('');
				} catch (error) {
					console.error('Search error:', error);
					searchResults.innerHTML = `
						<div class="p-2 text-sm text-red-500">
							An error occurred while searching
						</div>
					`;
					searchResults.classList.remove('hidden');
				}
			}, 300); // 300ms debounce
		});

		// Close search results when clicking outside
		document.addEventListener('click', (e: MouseEvent) => {
			const target = e.target as Node;
			if (
				searchInput &&
				searchResults &&
				!searchInput.contains(target) &&
				!searchResults.contains(target)
			) {
				searchResults.classList.add('hidden');
			}
		});
	}
</script>
