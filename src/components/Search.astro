---
// Search component now relies on the API endpoint for data
// No need to fetch posts at build time since search is handled via API

interface Props {
	id?: string;
	placeholder?: string;
	className?: string;
	showTypes?: boolean;
	contentFilter?: 'all' | 'garden-only' | 'projects-only';
}

const {
	id = 'search',
	placeholder = 'Search...',
	className = '',
	showTypes = true,
	contentFilter = 'all',
} = Astro.props;

// Generate unique IDs to avoid conflicts when multiple search components exist
const searchId = `${id}-input`;
const resultsId = `${id}-results`;
---

<div
	class={`search-container relative ${className}`}
	data-search-id={id}
	data-content-filter={contentFilter}
>
	<div class="relative">
		<input
			type="search"
			id={searchId}
			placeholder={placeholder}
			class="w-full px-3 py-1.5 pr-8 text-sm text-garden-primary dark:text-garden-dark-primary bg-white dark:bg-garden-dark-surface border border-gray-200 dark:border-gray-700 rounded-md focus:outline-none focus:ring-1 focus:ring-garden-accent dark:focus:ring-garden-dark-accent focus:border-transparent placeholder-garden-secondary dark:placeholder-garden-dark-secondary"
			autocomplete="off"
			spellcheck="false"
		/>
		<div
			class="absolute right-2 top-1/2 -translate-y-1/2 text-garden-secondary dark:text-garden-dark-secondary pointer-events-none"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				class="h-4 w-4"
				fill="none"
				viewBox="0 0 24 24"
				stroke="currentColor"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
			</svg>
		</div>
		<!-- Loading indicator -->
		<div
			class="search-loading absolute right-8 top-1/2 -translate-y-1/2 text-garden-accent dark:text-garden-dark-accent hidden"
		>
			<svg
				class="animate-spin h-4 w-4"
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
			>
				<circle
					class="opacity-25"
					cx="12"
					cy="12"
					r="10"
					stroke="currentColor"
					stroke-width="4"></circle>
				<path
					class="opacity-75"
					fill="currentColor"
					d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
				></path>
			</svg>
		</div>
	</div>

	<!-- Results dropdown -->
	<div
		id={resultsId}
		class="search-results absolute w-full mt-1 bg-white dark:bg-garden-dark-surface border border-gray-200 dark:border-gray-700 rounded-md shadow-lg hidden max-h-80 overflow-y-auto z-50"
	>
	</div>
</div>

<script>
	import { actions } from 'astro:actions';

	// Simple search implementation
	document.addEventListener('DOMContentLoaded', () => {
		const searchInputs = document.querySelectorAll('input[type="search"]');

		searchInputs.forEach((searchInput) => {
			const container = searchInput.closest('.search-container');
			const resultsDiv = container?.querySelector('.search-results');
			const loadingIndicator = container?.querySelector('.search-loading');

			if (!resultsDiv) return;

			let debounceTimeout: number;
			let currentQuery = '';

			searchInput.addEventListener('input', async (e) => {
				const target = e.target as HTMLInputElement;
				if (!target) return;

				const query = target.value.trim();
				currentQuery = query;

				clearTimeout(debounceTimeout);

				if (query.length === 0) {
					resultsDiv.classList.add('hidden');
					return;
				}

				// Show loading
				if (loadingIndicator) loadingIndicator.classList.remove('hidden');

				debounceTimeout = window.setTimeout(async () => {
					if (query !== currentQuery) return;

					try {
						const container = searchInput.closest(
							'.search-container'
						) as HTMLElement;
						const contentFilter = container?.dataset.contentFilter || 'all';

						const { data, error } = await actions.search({
							q: query,
							limit: 12,
							contentFilter: contentFilter as
								| 'all'
								| 'garden-only'
								| 'projects-only',
						});

						if (loadingIndicator) loadingIndicator.classList.add('hidden');

						if (error) {
							resultsDiv.innerHTML = `<div class="p-4 text-red-500">Search error</div>`;
							resultsDiv.classList.remove('hidden');
							return;
						}

						if (data?.results?.length > 0) {
							const html = data.results
								.map(
									(result) => `
								<a href="${result.item.url}" class="block p-3 hover:bg-gray-50 dark:hover:bg-gray-700 border-b border-gray-100 dark:border-gray-700 last:border-b-0">
									<div class="font-medium text-sm text-garden-primary dark:text-garden-dark-primary">${result.item.title}</div>
									<div class="text-xs text-garden-secondary dark:text-garden-dark-secondary mt-1 line-clamp-2">${result.item.description}</div>
									<div class="flex items-center justify-between mt-2">
										<div class="text-xs text-garden-accent dark:text-garden-dark-accent capitalize">${result.item.type}</div>
									</div>
								</a>
							`
								)
								.join('');

							// Add a footer if there are many results
							const footer =
								data.results.length >= 10
									? `<div class="p-3 text-xs text-center text-garden-muted dark:text-garden-dark-muted border-t border-gray-100 dark:border-gray-700">
									Showing ${data.results.length} of ${data.meta?.total || data.results.length} results
								   </div>`
									: '';

							resultsDiv.innerHTML = html + footer;
							resultsDiv.classList.remove('hidden');
						} else {
							const filterText =
								contentFilter === 'garden-only'
									? 'garden posts'
									: contentFilter === 'projects-only'
										? 'projects'
										: 'content';
							resultsDiv.innerHTML = `<div class="p-4 text-garden-muted dark:text-garden-dark-muted">No ${filterText} found for "${query}"</div>`;
							resultsDiv.classList.remove('hidden');
						}
					} catch (error) {
						if (loadingIndicator) loadingIndicator.classList.add('hidden');
						resultsDiv.innerHTML = `<div class="p-4 text-red-500">Search failed</div>`;
						resultsDiv.classList.remove('hidden');
					}
				}, 300);
			});

			// Hide results when clicking outside
			document.addEventListener('click', (e) => {
				const target = e.target as Node;
				if (!container?.contains(target)) {
					resultsDiv.classList.add('hidden');
				}
			});

			// Handle Escape key
			searchInput.addEventListener('keydown', (e) => {
				const keyEvent = e as KeyboardEvent;
				const input = e.target as HTMLInputElement;
				if (keyEvent.key === 'Escape') {
					resultsDiv.classList.add('hidden');
					input.blur();
				}
			});
		});
	});
</script>

<style>
	.line-clamp-2 {
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
		line-height: 1.3;
		max-height: 2.6em;
	}
</style>
