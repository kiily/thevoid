---
import { DataService } from '../lib/data-service';
import Search from './Search.astro';

const categories = await DataService.getCategories();
const tags = await DataService.getTags();
---

<button
	id="nav-toggle"
	class="fixed top-20 left-6 z-50 p-2 bg-white dark:bg-garden-dark-surface rounded-lg shadow-md text-garden-secondary dark:text-garden-dark-secondary hover:text-garden-accent dark:hover:text-garden-dark-accent transition-all duration-300"
	aria-label="Toggle Navigation"
>
	<svg
		xmlns="http://www.w3.org/2000/svg"
		class="h-6 w-6"
		fill="none"
		viewBox="0 0 24 24"
		stroke="currentColor"
	>
		<path
			stroke-linecap="round"
			stroke-linejoin="round"
			stroke-width="2"
			d="M4 6h16M4 12h16M4 18h16"></path>
	</svg>
</button>

<nav
	id="nav-menu"
	class="fixed top-0 left-0 w-64 h-screen -translate-x-full transition-transform duration-300 ease-in-out z-40 bg-garden-surface dark:bg-garden-dark-surface border-r border-gray-200 dark:border-gray-700"
>
	<div class="p-6">
		<div class="mb-8 mt-16">
			<a
				href="/"
				class="text-2xl font-bold text-garden-primary dark:text-garden-dark-primary hover:text-garden-accent dark:hover:text-garden-dark-accent transition-colors font-ui"
			>
				Digital Garden
			</a>
		</div>

		<Search />

		<div class="space-y-6">
			<div>
				<h3
					class="text-sm font-semibold text-garden-secondary dark:text-garden-dark-secondary uppercase tracking-wider mb-3 font-ui"
				>
					Categories
				</h3>
				<ul class="space-y-2">
					{
						categories.map((category) => (
							<li>
								<a
									href={`/category/${category}`}
									class="nav-link text-garden-primary dark:text-garden-dark-primary hover:text-garden-accent dark:hover:text-garden-dark-accent transition-colors"
								>
									{category}
								</a>
							</li>
						))
					}
				</ul>
			</div>

			<div>
				<h3
					class="text-sm font-semibold text-garden-secondary dark:text-garden-dark-secondary uppercase tracking-wider mb-3 font-ui"
				>
					Tags
				</h3>
				<div class="flex flex-wrap gap-2">
					{
						tags.map((tag) => (
							<a
								href={`/tag/${tag}`}
								class="nav-link px-2 py-1 text-sm bg-garden-background dark:bg-garden-dark-background text-garden-secondary dark:text-garden-dark-secondary rounded-md hover:bg-garden-accent hover:text-white dark:hover:bg-garden-dark-accent transition-colors"
							>
								{tag}
							</a>
						))
					}
				</div>
			</div>
		</div>
	</div>
</nav>

<div
	id="nav-overlay"
	class="fixed inset-0 bg-black/20 dark:bg-black/40 z-30 transition-opacity duration-300 ease-in-out opacity-0 pointer-events-none"
>
</div>

<script>
	class NavigationMenu {
		private isOpen = false;
		private toggle: HTMLElement;
		private menu: HTMLElement;
		private overlay: HTMLElement;
		private main: HTMLElement | null;

		constructor() {
			this.toggle = document.getElementById('nav-toggle')!;
			this.menu = document.getElementById('nav-menu')!;
			this.overlay = document.getElementById('nav-overlay')!;
			this.main = document.querySelector('main');

			this.init();
		}

		private init() {
			// Load saved state
			this.isOpen = localStorage.getItem('navOpen') === 'true';
			this.updateUI();

			// Event listeners
			this.toggle.addEventListener('click', () => this.toggleMenu());
			this.overlay.addEventListener('click', () => this.closeMenu());

			// Close on mobile when clicking links
			document.querySelectorAll('.nav-link').forEach((link) => {
				link.addEventListener('click', () => {
					if (window.innerWidth < 768) this.closeMenu();
				});
			});

			// Keyboard and resize events
			document.addEventListener('keydown', (e) => {
				if (e.key === 'Escape') this.closeMenu();
			});

			window.addEventListener('resize', () => {
				if (window.innerWidth < 768 && this.isOpen) this.closeMenu();
			});
		}

		private toggleMenu() {
			this.isOpen = !this.isOpen;
			this.updateUI();
			localStorage.setItem('navOpen', this.isOpen.toString());
		}

		private closeMenu() {
			this.isOpen = false;
			this.updateUI();
			localStorage.setItem('navOpen', 'false');
		}

		private updateUI() {
			// Toggle classes based on state
			this.menu.classList.toggle('-translate-x-full', !this.isOpen);
			this.toggle.classList.toggle('translate-x-64', this.isOpen);
			this.overlay.classList.toggle('opacity-0', !this.isOpen);
			this.overlay.classList.toggle('pointer-events-none', !this.isOpen);

			// Body overflow
			document.body.classList.toggle('overflow-hidden', this.isOpen);
			document.body.classList.toggle('md:overflow-auto', this.isOpen);

			// Main content margin
			this.main?.classList.toggle('md:ml-64', this.isOpen);
		}
	}

	// Initialize when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => new NavigationMenu());
	} else {
		new NavigationMenu();
	}

	// Re-initialize on page navigation
	document.addEventListener('astro:page-load', () => new NavigationMenu());
</script>
